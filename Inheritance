What is Inheritance in Python?
      Inheritance is the ability to ‘inherit’ features or attributes from already written classes into newer classes we make.
      In Python inheritance, new class/es inherits from older class/es. The new class/es copies all the older class's functions and attributes without rewriting the syntax in the new class/es. These new classes are called derived classes, and old ones are called base classes.
      
Syntax:

      class DerivedClass(BaseClass):
           # Class definition
           
Here, DerivedClass is the class that will inherit from the BaseClass. The BaseClass is the class that will serve as the parent or superclass.

Types of Inheritance in Python:
      
      1.Single Inheritance 
      2.Multiple Inheritance 
      3.Multilevel Inheritance 
      4.Hybrid Inheritance 
      5.Hierachical Inheritance 
      
Single Inheritance in Python:
      Single Inheritance is the simplest form of inheritance where a single child class is derived from a single parent class. Due to its candid nature, it is also known as Simple Inheritance.
      
Example:
      class parent:                  # parent class
         def func1(self):
             print("Hello Parent")
 
      class child(parent):    
         # child class
         def func2(self):            # we include the parent class
             print("Hello Child")
      test = child()                 # object created
      test.func1()                   # parent method called via child object
      test.func2()

Multiple Inheritance in Python:
      In multiple inheritance, a single child class is inherited from two or more parent classes. It means the child class has access to all the parent classes' methods and attributes.
             
Example:
      class parent1:                     # first parent class
          def func1(self):                   
              print("Hello Parent1")
 
      class parent2:                     # second parent class
          def func2(self):                   
              print("Hello Parent2")
 
      class parent3:                     # third parent class
          def func2(self):                     # the function name is same as parent2
              print("Hello Parent3")
 
      class child(parent1, parent2, parent3):     # child class
          def func3(self):                     # we include the parent classes
              print("Hello Child")
       test = child()        # object created
       test.func1()          # parent1 method called via child
       test.func2()          # parent2 method called via child instead of parent3
       test.func3()          # child method called
       
Multilevel Inheritance in python :
        a type of Inheritance that involves inheriting a class that has already inherited some other class.
        where the parent class/es itself is derived from another class/es.
        
Example:
        class grandparent:                 # first level
            def func1(self):                   
               print("Hello Grandparent")
 
        class parent(grandparent):         # second level
            def func2(self):                   
               print("Hello Parent")
 
        class child(parent):               # third level
            def func3(self):                   
               print("Hello Child")   
       
        test = child()                     # object created
        test.func1()                       # 3rd level calls 1st level
        test.func2()                       # 3rd level calls 2nd level
        test.func3()                       # 3rd level calls 3rd level
        
Hierarchical Inheritance in Python:
        Hierarchical Inheritance is the right opposite of multiple inheritance. It means that there are multiple derived child classes from a single-parent class.
      
Example:
        class parent:                       # parent class
           def func1(self):                   
               print("Hello Parent")
 
        class child1(parent):               # first child class
           def func2(self):                   
               print("Hello Child1")
 
 
        class child2(parent):               # second child class
           def func3(self):                   
               print("Hello Child2")   
        test1 = child1()                     # objects created
        test2 = child2() 
 
        test1.func1()                       # child1 calling parent method
        test1.func2()                       # child1 calling its own method
 
        test2.func1()                       # child2 calling parent method
        test2.func3()                       # child2 calling its own method
        
Hybrid Inheritance in python :
        Hybrid Inheritance is the mixture of two or more different types of inheritance. Here we can have many relationships between parent and child classes with multiple levels.

Example:
        class parent1:                            # first parent class
           def func1(self):                   
               print("Hello Parent")
 
 
       class parent2:                            # second parent class
          def func2(self):                   
               print("Hello Parent")
 
       class child1(parent1):                    # first child class
          def func3(self):                   
               print("Hello Child1")
 
 
      class child2(child1, parent2):            # second child class
         def func4(self):                   
               print("Hello Child2")   
      test1 = child1()                          # object created
      test2 = child2()
 
      test1.func1()                       # child1 calling parent1 method
      test1.func3()                       # child1 calling its own method
 
      test2.func1()                       # child2 calling parent1 method
      test2.func2()                       # child2 calling parent2 method
      test2.func3()                       # child2 calling child1 method
      test2.func4()
             
             
             
