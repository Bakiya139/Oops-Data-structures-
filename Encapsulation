what is Encapsulation :
     Encapsulation is a mechanism of wrapping the data (variables) and code acting on the data (methods) together as a single unit. 
     In encapsulation, the variables of a class will be hidden from other classes, and can be accessed only through the methods of their current class
Types of Encapsulation in OOPs:

1. Data Member Encapsulation

     Data members can be defined as Private members of the Class. Setters and Getters methods should be used by any object that wants to change or retrieve the value of a data member.

2. Method Encapsulation

     We can hide methods used for internal implementation that does not need to be visible to the public. The method should be declared as private so that the user does not have access to it.

3. Class Encapsulation

     Our implementation might contain an internal implementation of a class that stores and processes specific information.
     We encapsulate that class by defining it as private and hiding it from user access. 
     These classes should not be included in any public interface.
     
Real-Life Example of Encapsulation:
     Let's look at a real-life example to better comprehend the notion of encapsulation.
     Consider a Capsule as an example (Medicine). 
     The capsule's powder is made up of many components, and the capsule's outer shield protects the internal components from the outside world. 
     Similarly, we can wrap data and code as a single unit and secure it from outside code using Encapsulation.

Advantages of Encapsulation:

Data Protection:
The program runner will not be able to identify or see which methods are present in the code. 

Flexibility: 
The code which is encapsulated looks more cleaner and flexible, and can be changed as per the needs. 

Reusability:
The methods can be changed and the code is reusable.

Disadvantages of Encapsulation:

Code Size:
The length of the code increases drastically in the case of encapsulation as we need to provide all the methods with the specifiers.

More Instructions:
As the size of the code increases, therefore, you need to provide additional instructions for every method.

Increased code execution:
Encapsulation results in an increase in the duration of the program execution. It is because more instructions are added to the code therefore they require more time to execute.

